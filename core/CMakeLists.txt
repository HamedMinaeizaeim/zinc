
# OpenCMISS-Zinc Library
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# Set the minimum version of cmake required to 2.8.1
# The FATAL_ERROR is needed if using cmake < 2.4

# This is the project name and shows up in ides
PROJECT( ZincCore )

IF( MSVC )
	SET( ZINC_C_INLINE __inline )
ELSE()
	SET( ZINC_C_INLINE "static inline" )
ENDIF()

SET( ZINC_CONFIGURE_HDR ${PROJECT_BINARY_DIR}/source/api/zinc/zincconfigure.h )
SET( ZINC_SHARED_OBJECT_HDR ${PROJECT_BINARY_DIR}/source/api/zinc/zincsharedobject.h )
CONFIGURE_FILE( ${PROJECT_SOURCE_DIR}/source/configure/zincconfigure.h.cmake
	${ZINC_CONFIGURE_HDR} )
CONFIGURE_FILE( ${PROJECT_SOURCE_DIR}/source/configure/zincsharedobject.h.cmake
	${ZINC_SHARED_OBJECT_HDR} )
SET( ZINC_CONFIGURE_HDRS ${ZINC_CONFIGURE_HDR} ${ZINC_SHARED_OBJECT_HDR} )

# Load in source files, each source file list may contain several
# CMake variables see comments for a list of _SRCS included from
# a particular file (similarly that file defines a _HDRS variable).
# Defines API_HDRS, API_TYPES_HDRS
INCLUDE( source/cmake/api_source_files.cmake )

# Defines APIPP_HDRS, APIPP_TYPES_HDRS
INCLUDE( source/cmake/apipp_source_files.cmake )

# Defines COMMAND_SRCS, CONTEXT_SRCS
INCLUDE( source/cmake/command_source_files.cmake )

# Defines COMPUTED_FIELD_CORE_SRCS, COMPUTED_FIELD_GRAPHICS_SRCS,
# COMPUTED_FIELD_SRCS (contains previous two)
INCLUDE( source/cmake/computed_field_source_files.cmake )

# Defines FINITE_ELEMENT_CORE_SRCS, FINITE_ELEMENT_GRAPHICS_SRCS,
# FINITE_ELEMENT_ADDITIONAL_SRCS, FINITE_ELEMENT_SRCS
# (group definition which includes the previous three)
INCLUDE( source/cmake/finite_element_source_files.cmake )

# Defines GENERAL_SRCS
INCLUDE( source/cmake/general_source_files.cmake )

# Defines GRAPHICS_SRCS
INCLUDE( source/cmake/graphics_source_files.cmake )

# Defines IMAGE_PROCESSING_SRCS
INCLUDE( source/cmake/image_processing_source_files.cmake )

# Defines COMFILE_SRCS, CURVE_SRCS, ELEMENT_SRCS, EMOTER_SRCS
# FIELD_IO_SRCS, INTERACTION_SRCS, IO_DEVICES_SRCS, MESH_SRCS, NODE_SRCS,
# REGION_SRCS, SELECTION_SRCS, THREE_D_DRAWING_SRCS, TIME_SRCS
INCLUDE( source/cmake/misc_source_files.cmake )

# Defines OPENCASCADE_SRCS
INCLUDE( source/cmake/opencascade_source_files.cmake )

# Defines ZINC_LIB_SRCS, ZINC_LIB_HDRS
INCLUDE( source/cmake/zinc_lib_source_files.cmake )

PRINT_LIST_DUPLICATIONS( ZINC_LIB_SRCS )
PRINT_LIST_DUPLICATIONS( ZINC_LIB_HDRS )

INCLUDE_DIRECTORIES( source source/api ${CMAKE_CURRENT_BINARY_DIR}/source
	${CMAKE_CURRENT_BINARY_DIR}/source/api ${INCLUDE_DIRS} )

IF( MSVC_IDE )
	# I want to group the source files by the directory layout for Visual Studio
	GROUP_SOURCE_FILES(${ZINC_LIB_SRCS} ${ZINC_LIB_HDRS} ${ZINC_CONFIGURE_HDRS})
	ADD_DEFINITIONS( "/wd4244 /nologo" )
ENDIF()

IF( ${CMAKE_SYSTEM_NAME} STREQUAL "Linux" AND ${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64" )
	SET_SOURCE_FILES_PROPERTIES( ${ZINC_LIB_SRCS}
		PROPERTIES COMPILE_FLAGS "-fPIC" )
ENDIF( ${CMAKE_SYSTEM_NAME} STREQUAL "Linux" AND ${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64" )

SET( ZINC_LIBRARY_NAME zinc )
IF( ZINC_BUILD_SHARED_LIBRARY )
	SET( ZINC_SHARED_TARGET ${ZINC_LIBRARY_NAME} )
	ADD_LIBRARY( ${ZINC_SHARED_TARGET} SHARED ${ZINC_LIB_SRCS} ${ZINC_LIB_HDRS} ${ZINC_CONFIGURE_HDRS} )
	LIST( APPEND ZINC_SHARED_DEFINITIONS -DZINC_SHARED_OBJECT )
	SET( ZINC_SHARED_DEFINITIONS ${ZINC_SHARED_DEFINITIONS} PARENT_SCOPE )
	IF( CMAKE_VERSION VERSION_LESS 2.8.7 )
		SET( LINK_PRIVATE )
		SET( LINK_PUBLIC )
	ELSE()
		SET( LINK_PRIVATE LINK_PRIVATE )
		SET( LINK_PUBLIC LINK_PUBLIC )
	ENDIF()
	TARGET_LINK_LIBRARIES( ${ZINC_LIBRARY_NAME} ${LINK_PRIVATE} ${DEPENDENT_LIBS} )
	IF( WIN32 )
		TARGET_LINK_LIBRARIES( ${ZINC_LIBRARY_NAME} ${LINK_PUBLIC} winmm.lib )
	ENDIF()

	SET_TARGET_PROPERTIES( ${ZINC_SHARED_TARGET} PROPERTIES
		COMPILE_DEFINITIONS "ZINC_SHARED_OBJECT"
		DEFINE_SYMBOL "ZINC_EXPORTS" )

	# Location of shared target
	GET_PROPERTY( SHARED_TARGET_LOCATION TARGET ${ZINC_SHARED_TARGET} PROPERTY VERSION )
ENDIF()

IF( ZINC_BUILD_STATIC_LIBRARY )
	SET( ZINC_STATIC_TARGET ${ZINC_LIBRARY_NAME}-static )
	ADD_LIBRARY( ${ZINC_STATIC_TARGET} STATIC ${ZINC_LIB_SRCS} ${ZINC_LIB_HDRS} ${ZINC_CONFIGURE_HDRS} )
	TARGET_LINK_LIBRARIES( ${ZINC_STATIC_TARGET} ${DEPENDENT_LIBS} )
	IF( WIN32 )
		TARGET_LINK_LIBRARIES( ${ZINC_STATIC_TARGET} winmm.lib )
	ENDIF()
	SET_TARGET_PROPERTIES( ${ZINC_STATIC_TARGET} PROPERTIES
		OUTPUT_NAME "${ZINC_LIBRARY_NAME}" PREFIX "lib" )
ENDIF()

SET_TARGET_PROPERTIES( ${ZINC_SHARED_TARGET} ${ZINC_STATIC_TARGET} PROPERTIES
	OUTPUT_NAME_RELEASE ${ZINC_SHARED_TARGET}${ZINC_DEVELOPER_VERSION}
	OUTPUT_NAME_DEBUG ${ZINC_SHARED_TARGET}d${ZINC_DEVELOPER_VERSION}
	VERSION ${ZINC_VERSION}
	SOVERSION ${ZINC_MAJOR_VERSION} )
# VERSION property doesn't work on Windows so we will fake it here.
IF( WIN32 AND ZINC_BUILD_SHARED_LIBRARY )
	SET_TARGET_PROPERTIES( ${ZINC_SHARED_TARGET} PROPERTIES
		OUTPUT_NAME_RELEASE ${ZINC_SHARED_TARGET}${ZINC_DEVELOPER_VERSION}.${ZINC_VERSION}
		OUTPUT_NAME_DEBUG ${ZINC_SHARED_TARGET}d${ZINC_DEVELOPER_VERSION}.${ZINC_VERSION} )
ENDIF()

# Remove old versions of the Zinc library.  Normally old versions would be overwritten
# but because we insert a revision number into the target name this doesn't happen.  So
# we manually remove old versions when configuring.
IF( ZINC_BUILD_SHARED_LIBRARY )
	GET_TARGET_PROPERTY(TARGET_LOCATION_RELEASE ${ZINC_SHARED_TARGET} LOCATION_RELEASE)
	GET_TARGET_PROPERTY(TARGET_LOCATION_DEBUG ${ZINC_SHARED_TARGET} LOCATION_DEBUG)
ELSEIF( ZINC_BUILD_STATIC_LIBRARY )
	GET_TARGET_PROPERTY(TARGET_LOCATION_RELEASE ${ZINC_STATIC_TARGET} LOCATION_RELEASE)
	GET_TARGET_PROPERTY(TARGET_LOCATION_DEBUG ${ZINC_STATIC_TARGET} LOCATION_DEBUG)
ENDIF()

# For multi-configuration IDEs the release and debug locations can be different
GET_FILENAME_COMPONENT(TARGET_PATH_RELEASE ${TARGET_LOCATION_RELEASE} PATH)
GET_FILENAME_COMPONENT(TARGET_PATH_DEBUG ${TARGET_LOCATION_DEBUG} PATH)
IF( "x${TARGET_PATH_RELEASE}" STREQUAL "x${TARGET_PATH_DEBUG}" )
	FILE( GLOB OLD_ZINCS ${TARGET_PATH_RELEASE}/libzinc* ${TARGET_PATH_RELEASE}/zinc* )
ELSE()
	FILE( GLOB OLD_ZINCS ${TARGET_PATH_RELEASE}/libzinc* ${TARGET_PATH_RELEASE}/zinc*
		${TARGET_PATH_DEBUG}/libzinc* ${TARGET_PATH_DEBUG}/zinc* )
ENDIF()

FOREACH( OLD_ZINC ${OLD_ZINCS} )
	MESSAGE( STATUS "Removing old Zinc library: ${OLD_ZINC}" )
	EXECUTE_PROCESS( COMMAND ${CMAKE_COMMAND} -E remove ${OLD_ZINC} )
ENDFOREACH()

# Install rules for Zinc
INSTALL( TARGETS ${ZINC_SHARED_TARGET} ${ZINC_STATIC_TARGET} EXPORT ${ZINC_LIBRARY_DEPENDS_GROUP}
	ARCHIVE DESTINATION ${ZINC_INSTALL_LIB_DIR}
	LIBRARY DESTINATION ${ZINC_INSTALL_LIB_DIR}
	RUNTIME DESTINATION ${ZINC_INSTALL_BIN_DIR} )

# Zinc API header install rules
INSTALL( FILES
	${ZINC_SHARED_OBJECT_HDR}
	${API_HDRS}
	${APIPP_HDRS}
	DESTINATION "${ZINC_INSTALL_INC_DIR}/zinc" )

INSTALL( FILES ${API_TYPES_HDRS} ${APIPP_TYPES_HDRS}
	DESTINATION "${ZINC_INSTALL_INC_DIR}/zinc/types" )

IF( ZINC_SHARED_TARGET )
	SET( ZINC_SHARED_TARGET ${ZINC_SHARED_TARGET} PARENT_SCOPE )
ENDIF()
IF( ZINC_STATIC_TARGET )
	SET( ZINC_STATIC_TARGET ${ZINC_STATIC_TARGET} PARENT_SCOPE )
ENDIF()


